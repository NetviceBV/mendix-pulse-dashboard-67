name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      confirm_merge:
        description: 'Merge dev to main and deploy to production?'
        required: true
        default: 'no'
        type: choice
        options:
        - 'yes'
        - 'no'

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_merge == 'yes'
    
    steps:
      - name: Checkout dev branch
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Merge dev to main
        run: |
          # Switch to main branch
          git checkout main
          git pull origin main
          
          # Merge dev into main without committing, excluding client.ts
          git merge origin/dev --no-ff --no-commit || {
            echo "Merge conflict detected, resolving automatically..."
            
            # For workflow file conflicts, use the dev version
            if [ -f .github/workflows/deploy-production.yml ]; then
              git checkout --theirs .github/workflows/deploy-production.yml
            fi
            
            # Mark conflicts as resolved
            git add .
          }
          
          # Restore client.ts from main branch (exclude it from merge)
          git checkout HEAD -- src/integrations/supabase/client.ts
          
          # Complete the merge commit
          git commit -m "Deploy: Merge dev to main via GitHub Actions (excluding client.ts)"
          
          # Push the merge to main
          git push origin main
          
          echo "âœ… Successfully merged dev to main (excluding client.ts)"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Deploy Supabase changes
        run: |
          # Show current migration files
          echo "Current migration files:"
          ls -la supabase/migrations/ 2>/dev/null || echo "No migrations folder found"
          
          # Link to remote Supabase project
          echo "Linking to Supabase project..."
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
          
          # Fix migration history mismatch by repairing as suggested
          echo "Repairing migration history..."
          supabase migration repair --status reverted 20250918064031 || echo "Repair command completed"
          supabase migration repair --status applied 20250918074207 || echo "Repair command completed"
          supabase migration repair --status applied 20250918074237 || echo "Repair command completed" 
          supabase migration repair --status applied 20250918125854 || echo "Repair command completed"
          supabase migration repair --status applied 20250918125944 || echo "Repair command completed"
          supabase migration repair --status applied 20250918131943 || echo "Repair command completed"
          
          # Now force push all migrations
          echo "Force applying all database migrations to production..."
          supabase db push --include-all --debug
          
          # Deploy edge functions
          echo "Deploying edge functions..."
          supabase functions deploy --no-verify-jwt
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Deployment Summary
        run: |
          echo "ðŸš€ Deployment Complete!"
          echo "âœ… Merged dev â†’ main"
          echo "âœ… Updated Supabase database"
          echo "âœ… Deployed edge functions"
          echo "ðŸ”„ Vercel will auto-deploy from main branch"
