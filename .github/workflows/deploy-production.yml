name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      confirm_merge:
        description: 'Merge dev to main and deploy to production?'
        required: true
        default: 'no'
        type: choice
        options:
        - 'yes'
        - 'no'

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_merge == 'yes'
    
    steps:
      - name: Checkout dev branch
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Merge dev to main
        run: |
          # Switch to main branch
          git checkout main
          git pull origin main
          
          # Check if there are any differences between dev and main
          if git diff --quiet origin/main origin/dev; then
            echo "‚ÑπÔ∏è No changes between dev and main branches - skipping merge"
            echo "SKIP_SUPABASE=true" >> $GITHUB_ENV
          else
            echo "üìù Changes detected - proceeding with merge"
            
            # Merge dev into main without committing, excluding client.ts
            git merge origin/dev --no-ff --no-commit || {
              echo "Merge conflict detected, resolving automatically..."
              
              # For workflow file conflicts, use the dev version
              if [ -f .github/workflows/deploy-production.yml ]; then
                git checkout --theirs .github/workflows/deploy-production.yml
              fi
              
              # Mark conflicts as resolved
              git add .
            }
            
            # Restore client.ts from main branch (exclude it from merge)
            git checkout HEAD -- src/integrations/supabase/client.ts 2>/dev/null || echo "client.ts not found, continuing..."
            
            # Check if there are still changes to commit after excluding client.ts
            if git diff --cached --quiet; then
              echo "‚ÑπÔ∏è No changes to commit after excluding client.ts"
              git reset --hard HEAD
              echo "SKIP_SUPABASE=true" >> $GITHUB_ENV
            else
              # Complete the merge commit
              git commit -m "Deploy: Merge dev to main via GitHub Actions (excluding client.ts)"
              
              # Push the merge to main
              git push origin main
              
              echo "‚úÖ Successfully merged dev to main (excluding client.ts)"
            fi
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Deploy Supabase changes
        if: env.SKIP_SUPABASE != 'true'
        run: |
          # Show current migration files
          echo "Current migration files:"
          ls -la supabase/migrations/ 2>/dev/null || echo "No migrations folder found"
          
          # Link to remote Supabase project with password
          echo "Linking to Supabase project..."
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} --password ${{ secrets.SUPABASE_DB_PASSWORD }}
          
          # Apply database migrations with proper error handling
          echo "Applying database migrations to production..."
          supabase db push --linked --confirm || {
            echo "Migration failed due to missing cron jobs. Marking problematic migration as applied..."
            # Mark the problematic migration as applied to skip it
            supabase migration repair --status applied 20250919110317
            # Try pushing remaining migrations
            supabase db push --linked --confirm
          }
          
          # Deploy edge functions
          echo "Deploying edge functions..."
          supabase functions deploy --no-verify-jwt
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Deployment Summary
        run: |
          echo "üöÄ Deployment Status:"
          if [ "$SKIP_SUPABASE" = "true" ]; then
            echo "‚ÑπÔ∏è  No changes detected between dev and main"
            echo "‚è≠Ô∏è  Skipped Supabase deployment"
            echo "‚úÖ No action needed - branches are in sync"
          else
            echo "‚úÖ Merged dev ‚Üí main"
            echo "‚úÖ Updated Supabase database"
            echo "‚úÖ Deployed edge functions"
            echo "üîÑ Vercel will auto-deploy from main branch"
          fi
