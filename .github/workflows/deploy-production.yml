name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      confirm_merge:
        description: 'Merge dev to main and deploy to production?'
        required: true
        default: 'no'
        type: choice
        options:
        - 'yes'
        - 'no'

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_merge == 'yes'
    
    steps:
      - name: Checkout dev branch
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Merge dev to main
        run: |
          # Switch to main branch
          git checkout main
          git pull origin main
          
          # Check if there are any differences between dev and main
          if git diff --quiet origin/main origin/dev; then
            echo "ℹ️ No Git changes between dev and main branches"
            echo "GIT_CHANGES=false" >> $GITHUB_ENV
          else
            echo "📝 Git changes detected - proceeding with merge"
            echo "GIT_CHANGES=true" >> $GITHUB_ENV
            
            # Merge dev into main without committing, excluding client.ts
            git merge origin/dev --no-ff --no-commit || {
              echo "Merge conflict detected, resolving automatically..."
              
              # For workflow file conflicts, use the dev version
              if [ -f .github/workflows/deploy-production.yml ]; then
                git checkout --theirs .github/workflows/deploy-production.yml
              fi
              
              # Mark conflicts as resolved
              git add .
            }
            
            # Restore client.ts from main branch (exclude it from merge)
            git checkout HEAD -- src/integrations/supabase/client.ts 2>/dev/null || echo "client.ts not found, continuing..."
            
            # Check if there are still changes to commit after excluding client.ts
            if git diff --cached --quiet; then
              echo "ℹ️ No changes to commit after excluding client.ts"
              git reset --hard HEAD
              echo "GIT_CHANGES=false" >> $GITHUB_ENV
            else
              # Complete the merge commit
              git commit -m "Deploy: Merge dev to main via GitHub Actions (excluding client.ts)"
              
              # Push the merge to main
              git push origin main
              
              echo "✅ Successfully merged dev to main (excluding client.ts)"
            fi
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Create production migration for missing schema changes
        run: |
          echo "🔄 Creating production migration for missing schema changes..."
          
          # Create migrations directory if it doesn't exist
          mkdir -p supabase/migrations
          
          # Remove any existing migrations to avoid conflicts
          rm -f supabase/migrations/*.sql
          
          # Create a single migration with the specific changes we know are missing
          MIGRATION_FILE="supabase/migrations/$(date +%Y%m%d%H%M%S)_add_missing_schema_changes.sql"
          
          cat > "$MIGRATION_FILE" << 'EOF'
-- Add missing schema changes from Lovable development
-- Generated: $(date)

-- Add whitelist_patterns column to log_monitoring_settings table (from 20250924111937)
DO $
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'log_monitoring_settings' 
                   AND column_name = 'whitelist_patterns') THEN
        ALTER TABLE public.log_monitoring_settings 
        ADD COLUMN whitelist_patterns JSONB DEFAULT '[]'::jsonb;
        
        RAISE NOTICE 'Added whitelist_patterns column to log_monitoring_settings';
    ELSE
        RAISE NOTICE 'whitelist_patterns column already exists in log_monitoring_settings';
    END IF;
END $;

-- Add any other missing schema changes here as needed
-- (Add more schema changes based on what's actually missing in production)
EOF
          
          echo "✅ Created production migration file:"
          ls -la supabase/migrations/
          echo ""
          echo "Migration content:"
          cat "$MIGRATION_FILE"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Deploy Supabase changes
        run: |
          # Active migration files after generation
          echo "Production migration files:"
          ls -la supabase/migrations/*.sql 2>/dev/null || echo "No migration files found"
          
          # Link to remote Supabase project with password
          echo "Linking to Supabase production project..."
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} --password ${{ secrets.SUPABASE_DB_PASSWORD }}
          
          # Verify which project we're connected to
          echo "🔍 Verifying Supabase project connection..."
          supabase status | grep "Project ref:" || echo "Could not determine project ref"
          echo "Target project ref should be: rewepsqarjbdjvfyuvnu"
          
          # Apply database migrations with comprehensive error handling
          echo "Applying fresh database migrations to production..."
          
          # Check if there are any migrations to apply
          if ls supabase/migrations/*.sql 1> /dev/null 2>&1; then
            echo "Found generated migrations, proceeding with deployment..."
            
            # Apply the fresh migration directly (no version conflicts)
            echo "Applying new migration to production..."
            if echo "y" | supabase db push --linked 2>&1 | tee migration_output.log; then
              echo "✅ Production migration applied successfully!"
            else
              echo "❌ Migration failed. Check the logs above for specific errors"
              echo "⚠️ Deployment will continue with edge functions"
            fi
          else
            echo "ℹ️ No migration files generated - skipping database migration step"
          fi
          
          # Deploy edge functions (run regardless of migration status)
          echo "Deploying edge functions..."
          echo "Checking for edge functions..."
          if [ -d "supabase/functions" ] && [ "$(ls -A supabase/functions 2>/dev/null)" ]; then
            echo "Found edge functions directory with content"
            ls -la supabase/functions/
            
            # Deploy all functions with detailed output
            supabase functions deploy --no-verify-jwt --debug || {
              echo "Function deployment failed, trying individual function deployment..."
              
              # Try deploying each function individually
              for func_dir in supabase/functions/*/; do
                if [ -d "$func_dir" ]; then
                  func_name=$(basename "$func_dir")
                  echo "Deploying function: $func_name"
                  supabase functions deploy "$func_name" --no-verify-jwt || echo "Failed to deploy $func_name"
                fi
              done
            }
          else
            echo "No edge functions found in supabase/functions directory"
          fi
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Deployment Summary
        run: |
          echo "🚀 Deployment Status:"
          if [ "$GIT_CHANGES" = "false" ]; then
            echo "ℹ️  No Git changes detected between dev and main"
            if ls supabase/migrations/*.sql 1> /dev/null 2>&1; then
              echo "✅ But schema migrations were generated and applied"
            else
              echo "ℹ️  No schema changes detected either"
            fi
          else
            echo "✅ Merged dev → main"
            echo "🚫 Applied manual schema fixes + filtered out old problematic migrations"
            echo "✅ Applied remaining Supabase migrations"
            echo "✅ Deployed edge functions"
            echo "🔄 Vercel will auto-deploy from main branch"
            
            echo ""
            echo "📋 Migration Summary:"
            if ls supabase/migrations/*.sql 1> /dev/null 2>&1; then
              echo "Migrations deployed to production:"
              ls supabase/migrations/*.sql | while read file; do
                echo "  ✅ $(basename "$file")"
              done
            else
              echo "  → No new migrations were deployed"
            fi
          fi
