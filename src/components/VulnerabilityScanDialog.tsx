import { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { AlertTriangle, Shield, Clock, ExternalLink, Bug } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

interface VulnerabilityScanDialogProps {
  isOpen: boolean;
  onClose: () => void;
  appId: string;
  environmentName: string;
  appName: string;
}

interface VulnerabilityScan {
  id: string;
  scan_status: string;
  started_at: string;
  completed_at?: string;
  total_jars: number;
  vulnerable_jars: number;
  clean_jars: number;
  error_jars: number;
  total_vulnerabilities: number;
  package_id?: string;
  package_version?: string;
  error_message?: string;
}

interface VulnerabilityFinding {
  id: string;
  jar_file: string;
  library_name: string;
  library_version?: string;
  vulnerability_id: string;
  title: string;
  description?: string;
  cvss_score?: number;
  severity?: string;
  reference_url?: string;
  published_at?: string;
  cve_id?: string;
  ghsa_id?: string;
}

export function VulnerabilityScanDialog({
  isOpen,
  onClose,
  appId,
  environmentName,
  appName
}: VulnerabilityScanDialogProps) {
  const [currentScan, setCurrentScan] = useState<VulnerabilityScan | null>(null);
  const [findings, setFindings] = useState<VulnerabilityFinding[]>([]);
  const [isScanning, setIsScanning] = useState(false);
  const [scanHistory, setScanHistory] = useState<VulnerabilityScan[]>([]);
  const { toast } = useToast();

  useEffect(() => {
    if (isOpen) {
      loadScanHistory();
    }
  }, [isOpen, appId, environmentName]);

  useEffect(() => {
    if (!currentScan) return;

    // Set up real-time subscription for scan updates
    const channel = supabase
      .channel('scan-updates')
      .on(
        'postgres_changes',
        {
          event: 'UPDATE',
          schema: 'public',
          table: 'vulnerability_scans',
          filter: `id=eq.${currentScan.id}`
        },
        (payload) => {
          console.log('Scan update received:', payload);
          const updatedScan = payload.new as VulnerabilityScan;
          setCurrentScan(updatedScan);
          
          if (updatedScan.scan_status === 'completed') {
            setIsScanning(false);
            loadFindings(updatedScan.id);
            loadScanHistory(); // Refresh history
            toast({
              title: "Scan completed",
              description: `Found ${updatedScan.total_vulnerabilities} vulnerabilities in ${updatedScan.vulnerable_jars} libraries`,
            });
          } else if (updatedScan.scan_status === 'failed') {
            setIsScanning(false);
            toast({
              title: "Scan failed",
              description: updatedScan.error_message || "Unknown error occurred",
              variant: "destructive",
            });
          }
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [currentScan?.id]);

  const loadScanHistory = async () => {
    try {
      const { data, error } = await supabase
        .from('vulnerability_scans')
        .select('*')
        .eq('app_id', appId)
        .eq('environment_name', environmentName)
        .order('started_at', { ascending: false })
        .limit(10);

      if (error) throw error;
      setScanHistory(data || []);
      
      // Set the most recent scan as current if it exists
      if (data && data.length > 0) {
        setCurrentScan(data[0]);
        if (data[0].scan_status === 'completed') {
          loadFindings(data[0].id);
        }
      }
    } catch (error) {
      console.error('Error loading scan history:', error);
    }
  };

  const loadFindings = async (scanId: string) => {
    try {
      const { data, error } = await supabase
        .from('vulnerability_findings')
        .select('*')
        .eq('scan_id', scanId)
        .order('cvss_score', { ascending: false });

      if (error) throw error;
      setFindings(data || []);
    } catch (error) {
      console.error('Error loading findings:', error);
    }
  };

  const startScan = async () => {
    try {
      setIsScanning(true);
      setCurrentScan(null);
      setFindings([]);

      const { data, error } = await supabase.functions.invoke('vulnerability-scan-environment', {
        body: { appId, environmentName }
      });

      if (error) throw error;

      toast({
        title: "Scan started",
        description: "Vulnerability scan is now running in the background",
      });
    } catch (error) {
      console.error('Error starting scan:', error);
      setIsScanning(false);
      toast({
        title: "Failed to start scan",
        description: error.message || "Unknown error occurred",
        variant: "destructive",
      });
    }
  };

  const getSeverityColor = (severity?: string) => {
    switch (severity?.toLowerCase()) {
      case 'critical': return 'destructive';
      case 'high': return 'destructive';
      case 'medium': return 'secondary';
      case 'moderate': return 'secondary';
      case 'low': return 'outline';
      default: return 'outline';
    }
  };

  const getSeverityIcon = (severity?: string) => {
    switch (severity?.toLowerCase()) {
      case 'critical':
      case 'high':
        return <AlertTriangle className="h-4 w-4" />;
      case 'medium':
      case 'moderate':
        return <Bug className="h-4 w-4" />;
      default:
        return <Shield className="h-4 w-4" />;
    }
  };

  const groupedFindings = findings.reduce((acc, finding) => {
    const key = `${finding.library_name}@${finding.library_version}`;
    if (!acc[key]) {
      acc[key] = [];
    }
    acc[key].push(finding);
    return acc;
  }, {} as Record<string, VulnerabilityFinding[]>);

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh]">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5" />
            Vulnerability Scan - {appName} ({environmentName})
          </DialogTitle>
        </DialogHeader>

        <Tabs defaultValue="current" className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="current">Current Scan</TabsTrigger>
            <TabsTrigger value="history">Scan History</TabsTrigger>
          </TabsList>

          <TabsContent value="current" className="space-y-4">
            {!currentScan && !isScanning && (
              <div className="text-center py-8">
                <Shield className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <h3 className="text-lg font-semibold mb-2">No recent scans found</h3>
                <p className="text-muted-foreground mb-4">
                  Start a vulnerability scan to analyze the security of this environment's dependencies.
                </p>
                <Button onClick={startScan} disabled={isScanning}>
                  {isScanning ? 'Starting...' : 'Start Vulnerability Scan'}
                </Button>
              </div>
            )}

            {isScanning && (
              <div className="space-y-4">
                <div className="flex items-center gap-2">
                  <Clock className="h-4 w-4 animate-spin" />
                  <span>Scanning for vulnerabilities...</span>
                </div>
                <Progress value={currentScan?.total_jars ? 50 : 10} className="w-full" />
                <p className="text-sm text-muted-foreground">
                  This may take several minutes depending on the number of dependencies.
                </p>
              </div>
            )}

            {currentScan && currentScan.scan_status === 'completed' && (
              <div className="space-y-4">
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="bg-card p-4 rounded-lg border">
                    <div className="text-2xl font-bold">{currentScan.total_jars}</div>
                    <div className="text-sm text-muted-foreground">Total Libraries</div>
                  </div>
                  <div className="bg-card p-4 rounded-lg border">
                    <div className="text-2xl font-bold text-destructive">{currentScan.vulnerable_jars}</div>
                    <div className="text-sm text-muted-foreground">Vulnerable</div>
                  </div>
                  <div className="bg-card p-4 rounded-lg border">
                    <div className="text-2xl font-bold text-green-600">{currentScan.clean_jars}</div>
                    <div className="text-sm text-muted-foreground">Clean</div>
                  </div>
                  <div className="bg-card p-4 rounded-lg border">
                    <div className="text-2xl font-bold text-destructive">{currentScan.total_vulnerabilities}</div>
                    <div className="text-sm text-muted-foreground">Total Issues</div>
                  </div>
                </div>

                {findings.length > 0 && (
                  <div>
                    <h3 className="text-lg font-semibold mb-4">Vulnerability Details</h3>
                    <ScrollArea className="h-96">
                      <div className="space-y-4">
                        {Object.entries(groupedFindings).map(([libraryKey, libraryFindings]) => (
                          <div key={libraryKey} className="border rounded-lg p-4">
                            <div className="flex items-center justify-between mb-3">
                              <h4 className="font-semibold">{libraryKey}</h4>
                              <Badge variant="outline">
                                {libraryFindings.length} issue{libraryFindings.length > 1 ? 's' : ''}
                              </Badge>
                            </div>
                            <div className="space-y-2">
                              {libraryFindings.map((finding) => (
                                <div key={finding.id} className="border-l-4 border-l-destructive pl-4 py-2">
                                  <div className="flex items-start justify-between gap-2">
                                    <div className="flex-1">
                                      <div className="flex items-center gap-2 mb-1">
                                        {getSeverityIcon(finding.severity)}
                                        <Badge variant={getSeverityColor(finding.severity)}>
                                          {finding.severity || 'Unknown'} 
                                          {finding.cvss_score ? ` (${finding.cvss_score})` : ''}
                                        </Badge>
                                        <code className="text-xs bg-muted px-1 rounded">
                                          {finding.vulnerability_id}
                                        </code>
                                      </div>
                                      <h5 className="font-medium text-sm">{finding.title}</h5>
                                      {finding.description && (
                                        <p className="text-xs text-muted-foreground mt-1 line-clamp-2">
                                          {finding.description}
                                        </p>
                                      )}
                                    </div>
                                    {finding.reference_url && (
                                      <Button
                                        variant="ghost"
                                        size="sm"
                                        className="h-6 w-6 p-0"
                                        onClick={() => window.open(finding.reference_url, '_blank')}
                                      >
                                        <ExternalLink className="h-3 w-3" />
                                      </Button>
                                    )}
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        ))}
                      </div>
                    </ScrollArea>
                  </div>
                )}

                <div className="flex justify-end">
                  <Button onClick={startScan} disabled={isScanning}>
                    Run New Scan
                  </Button>
                </div>
              </div>
            )}

            {currentScan && currentScan.scan_status === 'failed' && (
              <div className="text-center py-8">
                <AlertTriangle className="h-12 w-12 mx-auto text-destructive mb-4" />
                <h3 className="text-lg font-semibold mb-2">Scan Failed</h3>
                <p className="text-muted-foreground mb-4">
                  {currentScan.error_message || 'An unknown error occurred during the scan'}
                </p>
                <Button onClick={startScan} disabled={isScanning}>
                  Retry Scan
                </Button>
              </div>
            )}
          </TabsContent>

          <TabsContent value="history" className="space-y-4">
            <div className="flex justify-between items-center">
              <h3 className="text-lg font-semibold">Scan History</h3>
              <Button variant="outline" size="sm" onClick={loadScanHistory}>
                Refresh
              </Button>
            </div>
            
            <ScrollArea className="h-96">
              <div className="space-y-2">
                {scanHistory.map((scan) => (
                  <div
                    key={scan.id}
                    className={`border rounded-lg p-3 cursor-pointer hover:bg-accent/50 ${
                      currentScan?.id === scan.id ? 'bg-accent' : ''
                    }`}
                    onClick={() => {
                      setCurrentScan(scan);
                      if (scan.scan_status === 'completed') {
                        loadFindings(scan.id);
                      }
                    }}
                  >
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="flex items-center gap-2">
                          <Badge
                            variant={
                              scan.scan_status === 'completed' ? 'default' :
                              scan.scan_status === 'failed' ? 'destructive' : 'secondary'
                            }
                          >
                            {scan.scan_status}
                          </Badge>
                          <span className="text-sm">
                            {new Date(scan.started_at).toLocaleDateString()} {new Date(scan.started_at).toLocaleTimeString()}
                          </span>
                        </div>
                        {scan.scan_status === 'completed' && (
                          <div className="text-xs text-muted-foreground mt-1">
                            {scan.total_vulnerabilities} vulnerabilities in {scan.vulnerable_jars} libraries
                          </div>
                        )}
                      </div>
                      {scan.package_version && (
                        <Badge variant="outline" className="text-xs">
                          v{scan.package_version}
                        </Badge>
                      )}
                    </div>
                  </div>
                ))}
                
                {scanHistory.length === 0 && (
                  <div className="text-center py-8 text-muted-foreground">
                    No scan history found
                  </div>
                )}
              </div>
            </ScrollArea>
          </TabsContent>
        </Tabs>
      </DialogContent>
    </Dialog>
  );
}